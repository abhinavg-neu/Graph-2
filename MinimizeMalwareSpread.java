class Solution {
    //Time Complexity:O(n^2)
    //Space Complexity:O(n)

 int[] colors;
 int color;
    public int minMalwareSpread(int[][] graph, int[] initial) {
       if (graph == null || graph.length == 0) 
       return 0;

int n = graph.length;
        colors = new int [n];
        color =0;
       Arrays.fill(colors, -1);

        color =0;
        //get color array with every node marked with one color;
       for (int i =0;i < n;i ++){
            if (colors[i] == -1){
                //traverse on this node
                dfs (graph,i);
                color++;
            }
       }
       System.out.println("Printing colors array");
       for (int i =0;i < colors.length;i++){
        System.out.print(colors[i]+",");
       }
       // now the color variable will give us the number of connected graphs;
       // lets get count of the nodes in each graph
       int[] countG = new int [color];
       for (int i =0; i< colors.length;i++){
            int pos = colors[i]; // pos will give us the color number
            countG[pos]++;
       }
       // now let's go through the initial array, we'll take the node number
       //and check against the color array to check which group it affects
       int[] noInfected = new int[color];
       for (int i =0; i< initial.length;i++){
            int pos = colors[initial[i]]; // pos will give us the color number
            noInfected[pos]++;
       }
       int ans = -1;
        for (int i=0;i < initial.length;i++){
            int group = colors[initial[i]];
            if (noInfected[group] ==1){
            if (ans == -1){
                ans = initial[i];
            } else if (countG[group] > countG[colors[ans]]) {
                ans = initial[i];
            } else if (countG[group] == countG[colors[ans]] && 
            initial[i] < ans){
                ans = initial[i];
                }
            }
        }

        if (ans == -1){
        ans = Integer.MAX_VALUE;
      for (int i = 0; i < initial.length;i++){
                ans = Math.min (ans, initial[i]);
      } 
        }
      

        return ans;
    }

    private void dfs (int[][] graph, int pos){
        if (colors[pos] != -1)
        return;
                colors[pos] = color;
        for (int i =0;i < graph.length;i++){
            if (graph[pos][i] ==1 ){
                dfs (graph, i);
            }
        }
    }
}
